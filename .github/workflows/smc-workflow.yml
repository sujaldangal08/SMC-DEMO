# This workflow will build and push a PHP application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-php?pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and PHP_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy PHP app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: SMC-Laravel-App
  APP_ENV: development
  APP_KEY: base64:ieie2h3ULwTLKfoctUMuxp8C3/KOGhzv+TfmNuqJ4xg=
  APP_DEBUG: true
  APP_TIMEZONE: UTC
  APP_URL: http://localhost
  APP_LOCALE: en
  APP_FALLBACK_LOCALE: en
  APP_FAKER_LOCALE: en_US
  APP_MAINTENANCE_DRIVER: file
  APP_MAINTENANCE_STORE: database
  BCRYPT_ROUNDS: 12
  LOG_CHANNEL: stack
  LOG_STACK: single
  LOG_LEVEL: debug
  SESSION_DRIVER: database
  SESSION_LIFETIME: 120
  SESSION_ENCRYPT: false
  SESSION_PATH: /
  SESSION_DOMAIN: ''
  BROADCAST_CONNECTION: log
  FILESYSTEM_DISK: local
  QUEUE_CONNECTION: database
  CACHE_STORE: database
  CACHE_PREFIX: ''
  MEMCACHED_HOST: 127.0.0.1
  REDIS_CLIENT: phpredis
  REDIS_HOST: 127.0.0.1
  REDIS_PASSWORD: ''
  REDIS_PORT: 6379
  MAIL_MAILER: smtp
  MAIL_HOST: smtp-relay.brevo.com
  MAIL_PORT: 587
  MAIL_USERNAME: adarshghimire101@gmail.com
  MAIL_PASSWORD: XpFLMWcJQ2NAf4CY
  MAIL_ENCRYPTION: tls
  MAIL_FROM_ADDRESS: smcnotificaton@gmial.com
  MAIL_FROM_NAME: SMC-Laravel-App
  AWS_ACCESS_KEY_ID: ''
  AWS_SECRET_ACCESS_KEY: ''
  AWS_DEFAULT_REGION: us-east-1
  AWS_BUCKET: ''
  AWS_USE_PATH_STYLE_ENDPOINT: false
  VITE_APP_NAME: SMC-Laravel-App
  DATABASE_HOST: smc.mysql.database.azure.com
  DATABASE_NAME: smc
  DATABASE_PASSWORD: Gorkha@$2024
  DATABASE_USERNAME: smc
  
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@7c0b4c8c8ebed23eca9ec2802474895d105b11bc
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@87d74d4732ddb824259d80c8a508c0124bf1c673
        with:
          files: 'composer.json'

      - name: Get Composer Cache Directory
        id: composer-cache
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: php-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: php-app

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
